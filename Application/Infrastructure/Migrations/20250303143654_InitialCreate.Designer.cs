// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Infrastructure.Context;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SpecificationsDatabaseModel))]
    [Migration("20250303143654_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityFrameworkModelV2.Models.ATEXType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ATEXTypes");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.CatType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CatTypes");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.CustomOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomOrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("Debtor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CustomOrders");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.CustomOrderMotor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Bearings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool?>("HT")
                        .HasColumnType("bit");

                    b.Property<decimal?>("HighAmperage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("HighPower")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("HighRPM")
                        .HasColumnType("int");

                    b.Property<decimal?>("HighStartupAmperage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IEC")
                        .HasColumnType("int");

                    b.Property<int?>("IP")
                        .HasColumnType("int");

                    b.Property<string>("ISO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LowAmperage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LowPower")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LowRPM")
                        .HasColumnType("int");

                    b.Property<decimal?>("LowStartupAmperage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PTC")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PowerFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoltageType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CustomOrderMotors");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.CustomOrderVentilator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Atex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BladeAngle")
                        .HasColumnType("int");

                    b.Property<int?>("CatOutID")
                        .HasColumnType("int");

                    b.Property<int?>("CatTypeID")
                        .HasColumnType("int");

                    b.Property<int>("CustomOrderID")
                        .HasColumnType("int");

                    b.Property<int>("CustomOrderMotorID")
                        .HasColumnType("int");

                    b.Property<int?>("Efficiency")
                        .HasColumnType("int");

                    b.Property<int?>("GroupTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("HighAirVolume")
                        .HasColumnType("int");

                    b.Property<int?>("HighPressureDynamic")
                        .HasColumnType("int");

                    b.Property<int?>("HighPressureStatic")
                        .HasColumnType("int");

                    b.Property<int?>("HighPressureTotal")
                        .HasColumnType("int");

                    b.Property<int?>("HighRPM")
                        .HasColumnType("int");

                    b.Property<decimal?>("HighShaftPower")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LowAirVolume")
                        .HasColumnType("int");

                    b.Property<int?>("LowPressureDynamic")
                        .HasColumnType("int");

                    b.Property<int?>("LowPressureStatic")
                        .HasColumnType("int");

                    b.Property<int?>("LowPressureTotal")
                        .HasColumnType("int");

                    b.Property<int?>("LowRPM")
                        .HasColumnType("int");

                    b.Property<decimal?>("LowShaftPower")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SoundLevel")
                        .HasColumnType("int");

                    b.Property<int?>("SoundLevelTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("TemperatureClassID")
                        .HasColumnType("int");

                    b.Property<int?>("VentilatorTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CatTypeID");

                    b.HasIndex("CustomOrderID");

                    b.HasIndex("CustomOrderMotorID");

                    b.HasIndex("GroupTypeID");

                    b.HasIndex("SoundLevelTypeID");

                    b.HasIndex("TemperatureClassID");

                    b.HasIndex("VentilatorTypeID");

                    b.ToTable("CustomOrderVentilators");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.CustomOrderVentilatorTest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BuildSize")
                        .HasColumnType("int");

                    b.Property<int?>("Cover")
                        .HasColumnType("int");

                    b.Property<int>("CustomOrderVentilatorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("I1High")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("I1Low")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("I2High")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("I2Low")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("I3High")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("I3Low")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<int?>("MeasuredBladeAngle")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredMotorHighRPM")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredMotorLowRPM")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredVentilatorHighRPM")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredVentilatorLowRPM")
                        .HasColumnType("int");

                    b.Property<string>("MotorNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomOrderVentilatorID");

                    b.HasIndex("UserID");

                    b.ToTable("CustomOrderVentilatorTests");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.GroupType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GroupTypes");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.SoundLevelType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UOM")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SoundLevelTypes");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.TemperatureClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TemperatureClasses");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.TemplateMotor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Bearings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool?>("HT")
                        .HasColumnType("bit");

                    b.Property<decimal?>("HighAmperage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("HighPower")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("HighRPM")
                        .HasColumnType("int");

                    b.Property<decimal?>("HighStartupAmperage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IEC")
                        .HasColumnType("int");

                    b.Property<int?>("IP")
                        .HasColumnType("int");

                    b.Property<string>("ISO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LowAmperage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LowPower")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LowRPM")
                        .HasColumnType("int");

                    b.Property<decimal?>("LowStartupAmperage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PTC")
                        .HasColumnType("bit");

                    b.Property<int?>("Poles")
                        .HasColumnType("int");

                    b.Property<decimal?>("PowerFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoltageType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TemplateMotors");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.TemplateVentilator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AirVolume")
                        .HasColumnType("int");

                    b.Property<int?>("BladeAngle")
                        .HasColumnType("int");

                    b.Property<int?>("Efficiency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PressureDynamic")
                        .HasColumnType("int");

                    b.Property<int?>("PressureStatic")
                        .HasColumnType("int");

                    b.Property<int?>("PressureTotal")
                        .HasColumnType("int");

                    b.Property<int?>("RPM")
                        .HasColumnType("int");

                    b.Property<int?>("ShaftPower")
                        .HasColumnType("int");

                    b.Property<int?>("SoundLevel")
                        .HasColumnType("int");

                    b.Property<int?>("SoundLevelTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("VentilatorTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SoundLevelTypeID");

                    b.HasIndex("VentilatorTypeID");

                    b.ToTable("TemplateVentilators");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.VentilatorType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VentilatorTypes");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.CustomOrderVentilator", b =>
                {
                    b.HasOne("EntityFrameworkModelV2.Models.CatType", "CatType")
                        .WithMany("CustomOrderVentilators")
                        .HasForeignKey("CatTypeID");

                    b.HasOne("EntityFrameworkModelV2.Models.CustomOrder", "CustomOrder")
                        .WithMany("CustomOrderVentilators")
                        .HasForeignKey("CustomOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameworkModelV2.Models.CustomOrderMotor", "CustomOrderMotor")
                        .WithMany("CustomOrderVentilators")
                        .HasForeignKey("CustomOrderMotorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameworkModelV2.Models.GroupType", "GroupType")
                        .WithMany("CustomOrderVentilators")
                        .HasForeignKey("GroupTypeID");

                    b.HasOne("EntityFrameworkModelV2.Models.SoundLevelType", "SoundLevelType")
                        .WithMany("CustomOrderVentilators")
                        .HasForeignKey("SoundLevelTypeID");

                    b.HasOne("EntityFrameworkModelV2.Models.TemperatureClass", "TemperatureClass")
                        .WithMany("CustomOrderVentilators")
                        .HasForeignKey("TemperatureClassID");

                    b.HasOne("EntityFrameworkModelV2.Models.VentilatorType", "VentilatorType")
                        .WithMany("CustomOrderVentilators")
                        .HasForeignKey("VentilatorTypeID");

                    b.Navigation("CatType");

                    b.Navigation("CustomOrder");

                    b.Navigation("CustomOrderMotor");

                    b.Navigation("GroupType");

                    b.Navigation("SoundLevelType");

                    b.Navigation("TemperatureClass");

                    b.Navigation("VentilatorType");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.CustomOrderVentilatorTest", b =>
                {
                    b.HasOne("EntityFrameworkModelV2.Models.CustomOrderVentilator", "CustomOrderVentilator")
                        .WithMany("CustomOrderVentilatorTests")
                        .HasForeignKey("CustomOrderVentilatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameworkModelV2.Models.User", "User")
                        .WithMany("CustomOrderVentilatorTests")
                        .HasForeignKey("UserID");

                    b.Navigation("CustomOrderVentilator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.TemplateVentilator", b =>
                {
                    b.HasOne("EntityFrameworkModelV2.Models.SoundLevelType", "SoundLevelType")
                        .WithMany("TemplateVentilators")
                        .HasForeignKey("SoundLevelTypeID");

                    b.HasOne("EntityFrameworkModelV2.Models.VentilatorType", "VentilatorType")
                        .WithMany("TemplateVentilators")
                        .HasForeignKey("VentilatorTypeID");

                    b.Navigation("SoundLevelType");

                    b.Navigation("VentilatorType");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.CatType", b =>
                {
                    b.Navigation("CustomOrderVentilators");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.CustomOrder", b =>
                {
                    b.Navigation("CustomOrderVentilators");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.CustomOrderMotor", b =>
                {
                    b.Navigation("CustomOrderVentilators");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.CustomOrderVentilator", b =>
                {
                    b.Navigation("CustomOrderVentilatorTests");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.GroupType", b =>
                {
                    b.Navigation("CustomOrderVentilators");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.SoundLevelType", b =>
                {
                    b.Navigation("CustomOrderVentilators");

                    b.Navigation("TemplateVentilators");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.TemperatureClass", b =>
                {
                    b.Navigation("CustomOrderVentilators");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.User", b =>
                {
                    b.Navigation("CustomOrderVentilatorTests");
                });

            modelBuilder.Entity("EntityFrameworkModelV2.Models.VentilatorType", b =>
                {
                    b.Navigation("CustomOrderVentilators");

                    b.Navigation("TemplateVentilators");
                });
#pragma warning restore 612, 618
        }
    }
}
